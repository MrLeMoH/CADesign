openapi: 3.0.0
info:
  title: Book API
  version: '1.0'
  description: API для работы с книгами и резервами
servers:
  - url: http://127.0.0.1:8000/
    description: Локальный сервер Laravel

paths:
  /book:
    get:
      summary: Поиск книг
      description: Ищите книги по названию, автору или ID, либо весь список с пагинацией.
      parameters:
        - name: title
          in: query
          description: Название книги
          required: false
          schema:
            type: string
        - name: author
          in: query
          description: Автор книги
          required: false
          schema:
            type: string
        - name: id
          in: query
          description: ID книги
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: Количество записей на странице
          required: false
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          description: Номер страницы
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Книги найдены
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_page:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  first_page_url:
                    type: string
                    example: "http://127.0.0.1:8000/book?page=1"
                  last_page_url:
                    type: string
                    example: "http://127.0.0.1:8000/book?page=1"
                  prev_page_url:
                    type: string
                    example: null
                  next_page_url:
                    type: string
                    example: null
                  total:
                    type: integer
                    example: 1
                  per_page:
                    type: integer
                    example: 10
        '404':
          description: Книги не найдены
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Book not found"

    post:
      summary: Создать книгу
      description: Создает новую книгу. Требует авторизации администратора.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - title
                - author_id
                - publication_year
              properties:
                title:
                  type: string
                  example: "The Great Book"
                author_id:
                  type: integer
                  example: 1
                publication_year:
                  type: integer
                  example: 2022
                is_available:
                  type: boolean
                  example: true
      responses:
        '201':
          description: Книга создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book created successfully"
                  book:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

  /book/{id}:
    delete:
      summary: Удалить книгу
      description: Удаляет книгу по её ID. Требует авторизации администратора.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID книги для удаления
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Книга удалена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book deleted successfully"
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Книга не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Book not found"

    patch:
      summary: Редактировать книгу
      description: Редактирует книгу по её ID. Требует авторизации администратора.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID книги для редактирования
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  example: "Updated Book Title"
                author_id:
                  type: integer
                  example: 1
                publication_year:
                  type: integer
                  example: 2023
                is_available:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Книга обновлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book updated successfully"
                  book:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Книга не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Book not found"

  /reservations:
    post:
      summary: Создать бронирование книги
      description: Создает новое бронирование для книги. Требует авторизации пользователя.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - book_id
              properties:
                book_id:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Книга успешно забронирована
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book successfully reserved"
                  reservation:
                    $ref: '#/components/schemas/Reservation'
        '400':
          description: Книга недоступна для бронирования
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Book is not available"
        '404':
          description: Книга не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Book not found"
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

    put:
      summary: Вернуть книгу
      description: Отмечает книгу как возвращенную. Требует авторизации пользователя.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - book_id
              properties:
                book_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Книга успешно возвращена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book successfully returned"
                  reservation:
                    $ref: '#/components/schemas/Reservation'
        '404':
          description: Бронирование не найдено или уже возвращено
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reservation not found or already returned"
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author_id:
          type: integer
        publication_year:
          type: integer
        is_available:
          type: boolean
        author:
          $ref: '#/components/schemas/Author'
        created_at:
          type: string
        updated_at:
          type: string
    Reservation:
      type: object
      properties:
        id:
          type: integer
        book_id:
          type: integer
        user_id:
          type: integer
        reserved_at:
          type: string
        returned_at:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
